From 33b6900d09783e66f2657e1c56df87c0d48f094d Mon Sep 17 00:00:00 2001
From: Filip Gralinski <filipg@amu.edu.pl>
Date: Sat, 22 Sep 2012 10:39:10 +0200
Subject: [PATCH] do not use foreach macro

---
 libtoki/layers/lexiconclassify.h  | 5 ++---
 libtoki/layers/regexpclassify.cpp | 7 +++----
 libtoki/layers/tokenlayer.cpp     | 8 ++++----
 3 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/libtoki/layers/lexiconclassify.h b/libtoki/layers/lexiconclassify.h
index 84a3cb2..8303e87 100644
--- a/libtoki/layers/lexiconclassify.h
+++ b/libtoki/layers/lexiconclassify.h
@@ -9,7 +9,7 @@ any later version.
 
     This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE. 
+or FITNESS FOR A PARTICULAR PURPOSE.
 
     See the LICENSE, COPYING.LESSER and COPYING files for more details.
 */
@@ -17,7 +17,6 @@ or FITNESS FOR A PARTICULAR PURPOSE.
 #ifndef LIBTOKI_LEXICONCLASSIFYLAYER_H
 #define LIBTOKI_LEXICONCLASSIFYLAYER_H
 
-#include <libpwrutils/foreach.h>
 #include <libtoki/layers/tokenlayer.h>
 #include <libtoki/token.h>
 
@@ -93,7 +92,7 @@ LexiconClassifyLayer<CMP>::LexiconClassifyLayer(TokenSource *input,
 	std::string sep(", ");
 	const std::string& sepstring = props.get<std::string>("lexicon", "");
 	boost::algorithm::split(v, sepstring, boost::is_any_of(sep));
-	foreach (const std::string& s, v) {
+	BOOST_FOREACH (const std::string& s, v) {
 		if (!s.empty()) {
 			lex_.insert(UnicodeString::fromUTF8(s).unescape());
 		}
diff --git a/libtoki/layers/regexpclassify.cpp b/libtoki/layers/regexpclassify.cpp
index 5d88450..3c0b70a 100644
--- a/libtoki/layers/regexpclassify.cpp
+++ b/libtoki/layers/regexpclassify.cpp
@@ -9,12 +9,11 @@ any later version.
 
     This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE. 
+or FITNESS FOR A PARTICULAR PURPOSE.
 
     See the LICENSE, COPYING.LESSER and COPYING files for more details.
 */
 
-#include <libpwrutils/foreach.h>
 #include <libtoki/layers/regexpclassify.h>
 #include <libtoki/token.h>
 
@@ -28,7 +27,7 @@ RegexpClassifyLayer::RegexpClassifyLayer(TokenSource* input,
 		const Config::Node& props)
 	: TokenLayer(input, props)
 {
-	foreach (const Config::Node::value_type &v, props) {
+	BOOST_FOREACH (const Config::Node::value_type &v, props) {
 		if (boost::algorithm::starts_with(v.first, "type:")) {
 			std::string type = v.first.substr(5); //length of "type:"
 			UErrorCode status = U_ZERO_ERROR;
@@ -50,7 +49,7 @@ RegexpClassifyLayer::RegexpClassifyLayer(TokenSource* input,
 RegexpClassifyLayer::~RegexpClassifyLayer()
 {
 	typedef std::pair<std::string, RegexMatcher*> vt;
-	foreach (const vt &v, classifiers_) {
+	BOOST_FOREACH (const vt &v, classifiers_) {
 		delete v.second;
 	}
 }
diff --git a/libtoki/layers/tokenlayer.cpp b/libtoki/layers/tokenlayer.cpp
index 34084d5..3ac81aa 100644
--- a/libtoki/layers/tokenlayer.cpp
+++ b/libtoki/layers/tokenlayer.cpp
@@ -9,16 +9,16 @@ any later version.
 
     This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-or FITNESS FOR A PARTICULAR PURPOSE. 
+or FITNESS FOR A PARTICULAR PURPOSE.
 
     See the LICENSE, COPYING.LESSER and COPYING files for more details.
 */
 
-#include <libpwrutils/foreach.h>
 #include <libtoki/layers/init.h>
 #include <libtoki/layers/tokenlayer.h>
 #include <libtoki/token.h>
 
+#include <boost/foreach.hpp>
 #include <boost/algorithm/string.hpp>
 #include <boost/property_tree/ptree.hpp>
 
@@ -32,7 +32,7 @@ TokenLayer::TokenLayer(TokenSource* input, const Config::Node& props)
 	std::vector<std::string> sv;
 	std::string data = props.get("process_types", "");
 	boost::algorithm::split(sv, data, boost::algorithm::is_any_of(sep));
-	foreach (const std::string& s, sv) {
+	BOOST_FOREACH (const std::string& s, sv) {
 		if (!s.empty()) {
 			process_token_types_.insert(s);
 		}
@@ -40,7 +40,7 @@ TokenLayer::TokenLayer(TokenSource* input, const Config::Node& props)
 	std::vector<std::string> sv2;
 	std::string data2 = props.get("ignore_types", "");
 	boost::algorithm::split(sv2, data2, boost::algorithm::is_any_of(sep));
-	foreach (const std::string& s2, sv2) {
+	BOOST_FOREACH (const std::string& s2, sv2) {
 		if (!s2.empty()) {
 			do_not_process_token_types_.insert(s2);
 		}
-- 
1.7.12

